#!/usr/bin/env node
// -*- js -*-

var exec     = require('child_process').exec,
    fs       = require('fs'),
    path     = require('path'),
    promptly = require('promptly'),
    Q        = require('q'),
    touch    = require('touch'),
    uid      = require('uid-number'),
    yaml     = require('js-yaml');

var defaultConfigs = require('../lib/default-configs');

var serviceUserName    = 'droonga-http-server';
var serviceGroupName   = serviceUserName;
var serviceBaseDir     = '/home/' + serviceUserName + '/droonga';

var options            = null;
var baseDir            = null;
var serviceUserExists  = false;
var installedAsService = false;
var running            = false;


function checkServiceUserExistence() {
 return Q.Promise(function(resolve, reject, notify) {
  exec('id ' + serviceUserName, function(error, stdin, stdout) {
    if (!error)
      serviceUserExists = true;
    resolve(serviceUserExists);
  });
 });
}

function checkInstalledAsService() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!serviceUserName)
    return resolve(installedAsService);

  exec('service droonga-http-server status', function(error, stdin, stdout) {
    if (error) {
      exec('SYSTEMCTL_SKIP_REDIRECT=yes service droonga-http-server status', function(error, stdin, stdout) {
        installedAsService = stdin.indexOf('running') > -1 ||
                             stdin.indexOf('droonga-http-server is stopped') > -1;
        resolve(installedAsService);
      });
    }
    else {
      installedAsService = true;
      resolve(installedAsService);
    }
  });
 });
}

function ensureHaveWritePermission() {
 return Q.Promise(function(resolve, reject, notify) {
  testFile = baseDir + '/' + Date.now() + '.test';
  touch(testFile, {}, function(error) {
    if (error || !fs.existsSync(testFile)) {
      console.log('You have no permission to write files under ' +
                    '<' + baseDir + '>.')
      console.log('Try again with right permission.')
      process.exit(false)
      return reject(error);
    }
    fs.unlinkSync(testFile);
    resolve();
  });
 });
}

function checkRunningStatus() {
 return Q.Promise(function(resolve, reject, notify) {
  if (installedAsService) {
    exec('SYSTEMCTL_SKIP_REDIRECT=yes service droonga-http-server status',
         function(error, stdin, stdout) {
           running = !error && stdin.indexOf('running') > -1;
           resolve(running);
         });
  }
  else {
    exec('droonga-http-server-status ' +
           '--base-dir="' + baseDir + '" ' +
           '--pid-file="' + options.pidFile + '"',
         function(error, stdin, stdout) {
           running = !error;
           resolve(running);
         });
  }
 });
}

function ensureServiceStopped() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!running || options.quiet)
    return stopService().then(resolve);

  console.log('The droonga-http-server service is now running.');
  console.log('Before reconfiguration, the service is going to be stopped.');
  promptly.confirm('Are you sure you want to continue reconfiguration? (y/N): ',
                   { default: 'no',
                     retry:   false },
                   function(error, ok) {
                     if (error || !ok) {
                       process.exit(false);
                       return reject(error);
                     }
                     stopService().then(resolve);
                   });
 });
}

function stopService() {
 return Q.Promise(function(resolve, reject, notify) {
  if (installedAsService) {
    exec('service droonga-http-server stop',
         function(error, stdin, stdout) {
           resolve();
         });
  }
  else {
    exec('droonga-http-server-stop ' +
           '--base-dir="' + baseDir + '" ' +
           '--pid-file="' + options.pidFile + '"',
         function(error, stdin, stdout) {
           resolve();
         });
  }
 });
}

function startService() {
 return Q.Promise(function(resolve, reject, notify) {
  if (installedAsService) {
    exec('service droonga-http-server start',
         function(error, stdin, stdout) {
           resolve();
         });
  }
  else {
    console.log('The droonga-http-server service is still stopped.');
    console.log('You need to start the service again manually.');
    resolve();
  }
 });
}

function parseOptions() {
  options = require('../lib/server-options');
  options = options
              .add('--quiet',
                   'Run with no prompt.')
              .add('--reset-config',
                   'Regenerate the configuration file "droonga-http-server.yaml".')
              .define()
              .parse(process.argv);
}

function configFilePath() {
  return path.resolve(baseDir, 'droonga-http-server.yaml');
}

function configFileExists() {
  return fs.existsSync(configFilePath());
}

function confirmToReconfigure() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!options.quiet && !options.resetConfig) {
    promptly.confirm('Do you want the configuration file ' +
                        '"droonga-http-server.yaml" to be regenerated? (y/N): ',
                     { default: 'no',
                       retry:   false },
                     function(error, ok) {
                       options.resetConfig = !error && ok;
                       resolve();
                     });
  }
  else {
    resolve();
  }
 });
}

var configValues = {};

function setValue(name, message, callback) {
  if (options[name + 'Given'] || options.quiet) {
    configValues[name] = options[name];
    callback();
  }
  else {
    promptly.prompt(message + ' [' + options[name] + ']: ',
                    { default: options[name],
                      retry:   false },
                    function(error, value) {
                      configValues[name] = value;
                      callback();
                    });
  }
}

function setBoolean(name, message, callback) {
  if (options[name + 'Given'] || options.quiet) {
    configValues[name] = options[name];
    callback();
  }
  else {
    promptly.confirm(message + ' (y/N): ',
                     { default: 'no',
                       retry:   false },
                     function(error, ok) {
                       configValues[name] = !error && ok;
                       callback();
                     });
  }
}


function tryResetStringConfigs() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!options.resetConfig)
    return resolve();

  var configKeys = {
    port:                  'port',
    receiverHostName:      'hostname of this node',
    droongaEngineHostName: 'hostname of the droonga-engine node',
    droongaEnginePort:     'port number of the droonga-engine node',
    tag:                   'tag of the droonga-engine node',
    defaultDataset:        'default dataset',
    accessLogFile:         'path to the access log file',
    systemLogFile:         'path to the system log file',
    cacheSize:             'maximum size of the response cache',
    environment:           'environment'
  };
  if (serviceUserExists) {
    options.accessLogFile = 'droonga-http-server.access.log';
    options.systemLogFile = 'droonga-http-server.system.log';
    options.environment = 'production';
  }
  if (!installedAsService) {
    if (options.quiet || serviceUserExists)
      configValues.pidFile = defaultConfigs.pid_file;
    else if (options.pidFileGiven)
      configValues.pidFile = options.pidFile;
    else
      configKeys.pidFile = 'path to the PID file';
  }

  var keys = Object.keys(configKeys);
  var key = keys.shift();
  setValue(key, configKeys[key], function next() {
    if (!keys.length) {
      resolve();
    }
    else {
      key = keys.shift();
      setValue(key, configKeys[key], next);
    }
  });
 });
}

function tryResetBooleanConfigs() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!options.resetConfig)
    return resolve();

  var configKeys = {
    enableTrustProxy: 'enable "trust proxy" configuration'
  };
  if (serviceUserExists) {
    configValues.daemon = true;
  }
  else if (options.daemonGiven || options.quiet) {
    configValues.daemon = options.daemon;
  }
  else {
    configKeys.daemon = 'run as a daemon?';
  }

  var keys = Object.keys(configKeys);
  var key = keys.shift();
  setBoolean(key, configKeys[key], function next() {
    if (!keys.length) {
      resolve();
    }
    else {
      key = keys.shift();
      setBoolean(key, configKeys[key], next);
    }
  });
 });
}

function writeNewConfigs() {
 return Q.Promise(function(resolve, reject, notify) {
  if (!options.resetConfig)
    return resolve();

  var configs = {};
  configs.port               = configValues.port;
  configs.access_log_file    = configValues.accessLogFile;
  configs.system_log_file    = configValues.systemLogFile;
  configs.daemon             = configValues.daemon;
  if ('pidFile' in configValues)
    configs.pid_file = configValues.pidFile;
  configs.cache_size         = configValues.cacheSize;
  configs.enable_trust_proxy = configValues.enableTrustProxy;
  configs.environment        = configValues.environment;

  var engineConfigs = {};
  engineConfigs.host            = configValues.droongaEngineHostName;
  engineConfigs.port            = configValues.droongaEnginePort;
  engineConfigs.default_dataset = configValues.defaultDataset;
  engineConfigs.tag             = configValues.tag;
  engineConfigs.receiver_host   = configValues.receiverHostName;
  configs.engine = engineConfigs;

  var configYaml = yaml.safeDump(configs);
  safeWriteFileSync(configFilePath(), configYaml, { encoding: 'utf8' });

  if (serviceUserExists) {
    uid(serviceUserName, serviceGroupName, function(error, uid, gid) {
      fs.chownSync(configFilePath(), uid, gid);
      resolve();
    });
  }
  else {
    resolve();
  }
 });
}

function safeWriteFileSync(path, data, options) {
  var tempFilePath = path + '.' + Date.now();
  fs.writeFileSync(tempFilePath, data, options);
  fs.renameSync(tempFilePath, path);
}

function finish() {
 return Q.Promise(function(resolve, reject, notify) {
  if (running)
    startService().resolve();
  else
    resolve();
 });
}


checkServiceUserExistence()
 .then(checkInstalledAsService)
 .then(function() {
  if (serviceUserExists)
    process.env.DROONGA_BASE_DIR = defaultConfigs.baseDir = serviceBaseDir;

  baseDir = defaultConfigs.baseDir;
 })
 .then(ensureHaveWritePermission)
 .then(function() {
  parseOptions();

  if (!configFileExists()) {
    options.resetConfig = true;
  }
 })
 .then(checkRunningStatus)
 .then(ensureServiceStopped)
 .then(confirmToReconfigure)
 .then(tryResetStringConfigs)
 .then(tryResetBooleanConfigs)
 .then(writeNewConfigs)
 .then(finish);

