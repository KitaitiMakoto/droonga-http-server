#!/usr/bin/env node
// -*- js -*-

var chmod    = require('chmod'),
    exec     = require('child_process').exec,
    fs       = require('fs'),
    mkdirp   = require('mkdirp'),
    path     = require('path'),
    promptly = require('promptly'),
    Q        = require('q'),
    touch    = require('touch'),
    uid      = require('uid-number'),
    yaml     = require('js-yaml');

var defaultConfigs = require('../lib/default-configs'),
    optionUtils    = require('../lib/option-utils');

var serviceUserName    = 'droonga-http-server';
var serviceGroupName   = 'droonga';
var serviceBaseDir     = '/home/' + serviceUserName + '/droonga';

var options            = null;
var baseDir            = null;
var serviceUserExists  = false;
var installedAsService = false;
var running            = false;

function NotInstalledAsServiceError() {
  return new Error(NotInstalledAsServiceError.prototype.message);
}
NotInstalledAsServiceError.prototype = {
  message: 'not installed as a service'
};
NotInstalledAsServiceError.isInstance = function(error) {
  return String(error.message).indexOf(this.prototype.message) > -1;
};


function checkServiceUserExistence() {
  return Q.Promise(function(resolve, reject, notify) {
    exec('id ' + serviceUserName, function(error, stdin, stdout) {
      if (!error)
        serviceUserExists = true;
      resolve(serviceUserExists);
    });
  });
}

function checkInstalledAsService() {
  return Q.Promise(function(resolve, reject, notify) {
    if (!serviceUserName)
      return resolve(installedAsService);

    //TODO: we should support systemd also...
    exec('service droonga-http-server status', function(error, stdin, stdout) {
      if (error) {
        exec('service droonga-http-server status', function(error, stdin, stdout) {
          installedAsService = stdin.indexOf('running') > -1 ||
                                 stdin.indexOf('droonga-http-server is stopped') > -1 ||
                                 stdin.indexOf('droonga-http-server dead') > -1;
          resolve(installedAsService);
        });
      }
      else {
        installedAsService = true;
        resolve(installedAsService);
      }
    });
  });
}

function ensureHaveWritePermission() {
  function onFailed() {
    console.log('You have no permission to write files under ' +
                  '<' + baseDir + '>.')
    console.log('Try again with right permission.')
    process.exit(false)
  }
  return Q.Promise(function(resolve, reject, notify) {
    mkdirp(baseDir, { mode: '755' }, function(error) {
      if (error) {
        onFailed();
        return reject(error);
      }

      testFile = baseDir + '/' + Date.now() + '.test';
      touch(testFile, {}, function(error) {
        if (error || !fs.existsSync(testFile)) {
          onFailed();
          return reject(error);
        }
        fs.unlinkSync(testFile);
        resolve();
      });
    });
  });
}

function checkRunningStatus() {
  return Q.Promise(function(resolve, reject, notify) {
    if (installedAsService) {
      //TODO: we should support systemd also...
      exec('service droonga-http-server status',
           function(error, stdin, stdout) {
             running = !error;
             resolve(running);
           });
    }
    else {
      reject(new NotInstalledAsServiceError());
    }
  });
}

function ensureServiceStopped() {
  return Q.Promise(function(resolve, reject, notify) {
    if (!running)
      return resolve();

    if (!options.prompt)
      return stopService().then(resolve);

    console.log('The droonga-http-server service is now running.');
    console.log('Before reconfiguration, the service is going to be stopped.');
    promptly.confirm('Are you sure you want to continue reconfiguration? (y/N): ',
                     { default: 'no',
                       retry:   false },
                     function(error, ok) {
                       if (error || !ok) {
                         process.exit(false);
                         return reject(error);
                       }
                       stopService().then(resolve);
                     });
  });
}

function stopService() {
  return Q.Promise(function(resolve, reject, notify) {
    if (installedAsService) {
      //TODO: we should support systemd also...
      exec('service droonga-http-server stop',
           function(error, stdin, stdout) {
             resolve();
           });
    }
    else {
      reject(new NotInstalledAsServiceError());
    }
  });
}

function startService() {
  return Q.Promise(function(resolve, reject, notify) {
    if (installedAsService) {
      //TODO: we should support systemd also...
      exec('service droonga-http-server start',
           function(error, stdin, stdout) {
             resolve();
           });
    }
    else {
      reject(new NotInstalledAsServiceError());
    }
  });
}

function parseOptionsSync() {
  options = require('../lib/server-options');
  options = options
              .add('--no-prompt',
                   'Run with no prompt.')
              .add('--quiet',
                   'Same to --no-prompt. For backward compatibility.')
              .add('--reset-config',
                   'Regenerate the configuration file "droonga-http-server.yaml".')
              .define()
              .parse(process.argv);
  if (options.quiet)
    options.prompt = false;
}

function configFilePathSync() {
  return path.resolve(baseDir, 'droonga-http-server.yaml');
}

function configFileExistsSync() {
  return fs.existsSync(configFilePathSync());
}

function confirmToReconfigure() {
  return Q.Promise(function(resolve, reject, notify) {
    if (options.prompt && !options.resetConfig) {
      promptly.confirm('Do you want the configuration file ' +
                          '"droonga-http-server.yaml" to be regenerated? (y/N): ',
                       { default: 'no',
                         retry:   false },
                       function(error, ok) {
                         options.resetConfig = !error && ok;
                         resolve();
                       });
    }
    else {
      resolve();
    }
  });
}

var configValues = {};

function setStringOption(name, message) {
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.prompt) {
      configValues[name] = options[name];
      resolve();
    }
    else {
      promptly.prompt(message + ' [' + options[name] + ']: ',
                      { default: options[name],
                        retry:   false },
                      function(error, value) {
                        configValues[name] = value;
                        resolve();
                      });
    }
  });
}

function setStringsOption(name, message) {
  var values = optionUtils.normalizeStringArray(options[name]);
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.prompt) {
      configValues[name] = values;
      resolve();
    }
    else {
      promptly.prompt(message + ' (comma, vertical bar, or white-space separated) [' + values.join(', ') + ']: ',
                      { default: values,
                        retry:   false },
                      function(error, value) {
                        configValues[name] = optionUtils.normalizeStringArray(value);
                        resolve();
                      });
    }
  });
}

function setIntegerOption(name, message) {
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.prompt) {
      configValues[name] = options[name];
      resolve();
    }
    else {
      promptly.prompt(message + ' [' + options[name] + ']: ',
                      { default: options[name],
                        retry:   false },
                      function(error, value) {
                        value = parseInt(value);
                        if (isNaN(value))
                          value = options[name];
                        configValues[name] = value;
                        resolve();
                      });
    }
  });
}

function setBooleanOption(name, message) {
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.prompt) {
      configValues[name] = options[name];
      resolve();
    }
    else {
      promptly.confirm(message + ' (y/N): ',
                       { default: 'no',
                         retry:   false },
                       function(error, ok) {
                         configValues[name] = !error && ok;
                         resolve();
                       });
    }
  });
}


function tryResetConfigs() {
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.resetConfig)
      return resolve();

    options.accessLogFile = 'droonga-http-server.access.log';
    options.systemLogFile = 'droonga-http-server.system.log';
    options.environment = 'production';

    setIntegerOption('port', 'port')
      .then(function() { return setStringOption('receiveHostName', 'hostname of this node'); })
      .then(function() { return setStringsOption('droongaEngineHostNames', 'hostnames of droonga-engine nodes'); })
      .then(function() { return setIntegerOption('droongaEnginePort', 'port number of the droonga-engine node'); })
      .then(function() { return setStringOption('tag', 'tag of the droonga-engine node'); })
      .then(function() { return setStringOption('defaultDataset', 'default dataset'); })
      .then(function() { return setStringOption('accessLogFile', 'path to the access log file'); })
      .then(function() { return setStringOption('systemLogFile', 'path to the system log file'); })
      .then(function() { return setStringOption('systemLogLevel',
                                                'log level for the system log (' +
                                                   'silly,debug,verbose,info,warn,error)'); })
      .then(function() { return setIntegerOption('cacheSize', 'maximum size of the response cache'); })
      .then(function() { return setIntegerOption('cacheTtlInSeconds', 'time to live of cached responses, in seconds'); })
      .then(function() { return setBooleanOption('enableTrustProxy', 'enable "trust proxy" configuration'); })
      .then(function() { return setStringOption('environment', 'environment'); })
      .then(resolve);
  });
}

function writeNewConfigs() {
  return Q.Promise(function(resolve, reject, notify) {
    if (!options.resetConfig)
      return resolve();

    var configs = {};
    configs.port               = configValues.port;
    configs.access_log_file    = configValues.accessLogFile;
    configs.system_log_file    = configValues.systemLogFile;
    configs.system_log_level   = configValues.systemLogLevel;
    configs.cache_size         = configValues.cacheSize;
    configs.cache_ttl_in_seconds = configValues.cacheTtlInSeconds;
    configs.enable_trust_proxy = configValues.enableTrustProxy;
    configs.environment        = configValues.environment;

    var engineConfigs = {};
    engineConfigs.hosts           = configValues.droongaEngineHostNames;
    engineConfigs.port            = configValues.droongaEnginePort;
    engineConfigs.default_dataset = configValues.defaultDataset;
    engineConfigs.tag             = configValues.tag;
    engineConfigs.receive_host    = configValues.receiveHostName;
    configs.engine = engineConfigs;

    var configYaml = yaml.safeDump(configs);
    safeWriteFileSync(configFilePathSync(), configYaml, { encoding: 'utf8' });

    if (serviceUserExists) {
      uid(serviceUserName, serviceGroupName, function(error, uid, gid) {
        if (error)
          return reject(error);
        var path = configFilePathSync();
        fs.chownSync(path, uid, gid);
        chmod(path,
              { group:  { read: true },
                others: { read: true }},
              function(error) {
                if (error)
                  return reject(error);
                resolve();
              });
      });
    }
    else {
      resolve();
    }
  });
}

function safeWriteFileSync(path, data, options) {
  var tempFilePath = path + '.' + Date.now();
  fs.writeFileSync(tempFilePath, data, options);
  fs.renameSync(tempFilePath, path);
}

function finish() {
  return Q.Promise(function(resolve, reject, notify) {
    if (running)
      startService().then(resolve);
    else
      resolve();
  });
}


checkServiceUserExistence()
  .then(checkInstalledAsService)
  .then(function() {
    if (serviceUserExists)
      process.env.DROONGA_BASE_DIR = defaultConfigs.baseDir = serviceBaseDir;

    baseDir = defaultConfigs.baseDir;
  })
  .then(ensureHaveWritePermission)
  .then(function() {
    parseOptionsSync();

    if (!configFileExistsSync()) {
      options.resetConfig = true;
    }
  })
  .then(checkRunningStatus)
  .catch(function(error) {
    if (!NotInstalledAsServiceError.isInstance(error))
      throw error;
  })
  .then(ensureServiceStopped)
  .then(confirmToReconfigure)
  .then(tryResetConfigs)
  .then(writeNewConfigs)
  .then(finish)
  .catch(function(error) {
    console.error(error);
    console.error(error.stack);
    process.exit(false);
  });
