#!/usr/bin/env node
// -*- js -*-

var express = require('express'),
    droonga = require('express-droonga'),
    responseTime = require('response-time'),
    http = require('http'),
    options = require('commander');

var version = require('../package.json').version;

intOption = function(newValue, oldValue) {
  return parseInt(newValue);
}

options
  .version(version)
  .option('--port <port>', 'Port number', intOption, 13000)
  .option('--receive-host-name <name>',
          'Host name of the protocol adapter. ' +
            'It must be resolvable by Droonga engine.',
          '127.0.0.1')
  .option('--droonga-engine-host-name <name>', 'Host name of Droonga engine',
          '127.0.0.1')
  .option('--droonga-engine-port <port>', 'Port number of Droonga engine',
          intOption, 24224)
  .option('--default-dataset <dataset>', 'The default dataset',
          'Droonga')
  .option('--tag <tag>', 'The tag',
          'droonga')
  .option('--enable-logging', 'Enable logging to the standard output')
  .option('--cache-size <size>', 'The max number of cached requests',
          parseInt, 100)
  .parse(process.argv);

var application = express();
var server = http.createServer(application);

var MemoryStore = express.session.MemoryStore;
var sessionStore = new MemoryStore();
application.configure(function() {
  if (options.enableLogging) {
    application.use(express.logger());
  }
  application.use(express.cookieParser('secret key'));
  application.use(express.session({
    secret: 'secret key',
    store:  sessionStore
  }));
  application.use(responseTime());
  if (options.cacheSize > 0) {
    var cacheMiddlewareRules = [
      { regex: /./ }
    ];
    if (droonga.Cache) {
      var cache = new droonga.Cache({
        size: options.cacheSize,
      });
      application.use("/cache/statistics",
                      droonga.middleware.cacheStatistics(cache));
      application.use(droonga.middleware.cache(cache, {
        rules: cacheMiddlewareRules
      }));
    } else if (droonga.cache) {
      // TODO: Remove me when express-droonga 1.0.2 is released and
      // droonga-http-server requires express-droonga 1.0.2 or later.
      application.use(droonga.cache({
        size: options.cacheSize,
        rules: cacheMiddlewareRules,
      }));
    }
  }
});

application.droonga({
  prefix: '',
  defaultDataset: options.defaultDataset,
  tag: options.tag,
  server: server,
  sessionStore: sessionStore, // this is required to share session information HTTP APIs
  receiveHostName: options.receiveHostName,
  hostName: options.droongaEngineHostName,
  port: options.droongaEnginePort,
  plugins: [
    droonga.API_REST,
    droonga.API_GROONGA,
    droonga.API_DROONGA
  ]
});

server.listen(options.port);
