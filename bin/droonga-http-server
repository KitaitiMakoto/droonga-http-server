#!/usr/bin/env node
// -*- js -*-

var cookieParser = require('cookie-parser'),
    droonga      = require('express-droonga'),
    daemon       = require('daemon'),
    express      = require('express'),
    fs           = require('fs'),
    yaml         = require('js-yaml'),
    http         = require('http'),
    morgan       = require('morgan'),
    options      = require('commander'),
    path         = require('path'),
    responseTime = require('response-time'),
    session      = require('express-session'),
    winston      = require('winston');

var version = require('../package.json').version;

var baseDir = path.resolve(process.env.DROONGA_BASE_DIR || ".");
var configFile = path.resolve(baseDir, "droonga-http-server.yaml");
var defaultConfigs = {};
if (fs.existsSync(configFile)) {
  defaultConfigs = yaml.safeLoad(fs.readFileSync(configFile, 'utf8'));
  if (!('daemon' in defaultConfigs)) {
    defaultConfigs.daemon   = true;
    defaultConfigs.pid_file = 'droonga-http-server.pid';
  }
}

function defineDefaultConfig(path, value) {
  var slot = defaultConfigs;
  var keys = path.split('.');
  keys.some(function(key, index) {
    if (index == keys.length - 1) {
      if (key in slot)
        value = slot[key];
      else
        slot[key] = value;
    } else {
      if (!(key in slot))
        slot[key] = {};
      slot = slot[key];
    }
  });
  return value;
}

options.port             = defineDefaultConfig('port', 10041);
options.accessLogFile    = defineDefaultConfig('access_log_file', '-');
options.systemLogFile    = defineDefaultConfig('system_log_file', '-');
options.cacheSize        = defineDefaultConfig('cache_size', 100);
options.enableTrustProxy = defineDefaultConfig('enable_trust_proxy', false);
options.plugins          = defineDefaultConfig('plugins', [
  droonga.API_REST,
  droonga.API_GROONGA,
  droonga.API_DROONGA
]);
options.environment      = defineDefaultConfig('environment', process.env.NODE_ENV || 'development');

options.droongaEngineHostName = defineDefaultConfig('engine.host','127.0.0.1');
options.droongaEnginePort     = defineDefaultConfig('engine.port', 10031);
options.tag                   = defineDefaultConfig('engine.tag', 'droonga');
options.defaultDataset        = defineDefaultConfig('engine.default_dataset', 'Default');
options.receiverHostName      = defineDefaultConfig('engine.receiver_host', '127.0.0.1');

intOption = function(newValue, oldValue) {
  return parseInt(newValue);
}

pluginsOption = function(newValue, oldValue) {
  return newValue.split(/\s*,\s*/).map(function (plugin) {
    return require(plugin);
  });
}

options.environment = defaultConfigs.environment;

options
  .version(version)
  .option('--port <port>',
          'Port number (' + options.port + ')',
          intOption)
  .option('--receive-host-name <name>',
          'Host name of the protocol adapter. ' +
            'It must be resolvable by Droonga engine. ' +
            '(' + options.receiverHostName + ')')
  .option('--droonga-engine-host-name <name>',
          'Host name of Droonga engine (' + options.droongaEngineHostName + ')')
  .option('--droonga-engine-port <port>',
          'Port number of Droonga engine (' + options.droongaEnginePort + ')',
          intOption)
  .option('--default-dataset <dataset>',
          'The default dataset (' + options.defaultDataset + ')')
  .option('--tag <tag>',
          'The tag (' + options.tag + ')')
  .option('--access-log-file <file>',
          'Output access logs to <file>. ' +
            'You can use "-" as <file> to output to the standard output. ' +
            '(' + options.accessLogFile + ')')
  .option('--system-log-file <file>',
          'Output system logs to <file>. ' +
            'You can use "-" as <file> to output to the standard output. ' +
            '(' + options.systemLogFile + ')')
  .option('--cache-size <size>',
          'The max number of cached requests ' +
            '(' + options.cacheSize + ')',
          intOption)
  .option('--enable-trust-proxy',
          'Enable "trust proxy" configuration. It is required when you run droonga-http-server behind a reverse proxy. ' +
            '(' + options.enableTrustProxy + ')')
  .option('--plugins <plugin1,plugin2,...>',
          'Use specified plugins. ' +
            '(' + options.plugins.join(',') + ')',
          pluginsOption)
  .option('--daemon',
          'Run as a daemon. (' + options.daemon + ')')
  .option('--pid-file <pid-file>',
          'Output PID to <pid-file>.')
  .option('--environment <environment>',
          'Use specified environment. (' + options.environment + ')')
  .parse(process.argv);

if (options.daemon) {
  daemon();
}

var logger;
if (options.systemLogFile) {
  logger = new winston.Logger({
    transports: [
      new winston.transports.File({
        filename: options.systemLogFile,
        json: false
      })
    ]
  });
} else {
  var transports = [];
  if (!options.daemon) {
    transports.push(new winston.transports.Console());
  }
  logger = new winston.Logger({
    transports: transports
  });
}

if (options.pidFile) {
  var fd = fs.openSync(options.pidFile, 'w', 0644);
  fs.writeSync(fd, process.pid.toString());
}

var application = express();
var server = http.createServer(application);

application.set('json spaces', 1);
if (options.environment == 'production') {
  application.set('json spaces', -1); // disable pretty print!
}

var MemoryStore = session.MemoryStore;
var sessionStore = new MemoryStore();

if (options.enableTrustProxy) {
  application.enable('trust proxy');
}

if (options.accessLogFile) {
  var accessLogStream;
  if (options.accessLogFile == '-') {
    accessLogStream = process.stdout;
  } else {
    var accessLogStreamOptions = {
      flags: 'a',
      mode: 0644
    };
    accessLogStream = fs.createWriteStream(options.accessLogFile,
                                           accessLogStreamOptions);
  }
  var accessLogOptions = {
    stream: accessLogStream
  };
  application.use(morgan(accessLogOptions));
}
application.use(cookieParser('secret key'));
application.use(session({
  secret: 'secret key',
  store:  sessionStore
}));
application.use(responseTime());
application.use('/', express.static(path.normalize(__dirname + '/../public/groonga-admin')));
if (options.cacheSize > 0) {
  var cacheMiddlewareRules = [
    { regex: /^\// }
  ];
  if (droonga.Cache) {
    var cache = new droonga.Cache({
      size: options.cacheSize,
    });
    application.use("/statistics/cache",
                    droonga.middleware.cacheStatistics(cache));
    application.use(droonga.middleware.cache(cache, {
      rules: cacheMiddlewareRules,
      logger: logger
    }));
  } else if (droonga.cache) {
    // TODO: Remove me when express-droonga 1.0.2 is released and
    // droonga-http-server requires express-droonga 1.0.2 or later.
    application.use(droonga.cache({
      size: options.cacheSize,
      rules: cacheMiddlewareRules,
    }));
  }
}

application.droonga({
  prefix: '',
  logger: logger,
  defaultDataset: options.defaultDataset,
  tag: options.tag,
  server: server,
  sessionStore: sessionStore, // this is required to share session information HTTP APIs
  receiveHostName: options.receiveHostName,
  hostName: options.droongaEngineHostName,
  port: options.droongaEnginePort,
  plugins: options.plugins
});

server.listen(options.port);

function shutdown() {
  server.close();
  if (options.pidFile && fs.existsSync(options.pidFile)) {
    fs.unlinkSync(options.pidFile);
  }
}

process.on('SIGINT', function() {
  shutdown();
});

process.on('SIGTERM', function() {
  shutdown();
});
