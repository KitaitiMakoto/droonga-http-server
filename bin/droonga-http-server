#!/usr/bin/env node
// -*- js -*-

var cookieParser = require('cookie-parser'),
    droonga      = require('express-droonga'),
    daemon       = require('daemon'),
    express      = require('express'),
    fs           = require('fs'),
    http         = require('http'),
    morgan       = require('morgan'),
    path         = require('path'),
    responseTime = require('response-time'),
    session      = require('express-session'),
    winston      = require('winston');

var defaultConfigs = require('../lib/default-configs');
var options = require('../lib/server-options');
options = options.define().parse(process.argv);

var baseDir = defaultConfigs.baseDir;

if (options.daemon) {
  daemon();
}

var logger;
if (options.systemLogFile && options.systemLogFile != '-') {
  options.systemLogFile = path.resolve(baseDir, options.systemLogFile);
  logger = new winston.Logger({
    transports: [
      new winston.transports.File({
        filename: options.systemLogFile,
        json: false
      })
    ]
  });
} else {
  var transports = [];
  if (!options.daemon) {
    transports.push(new winston.transports.Console());
  }
  logger = new winston.Logger({
    transports: transports
  });
}

if (options.pidFile) {
  options.pidFile = path.resolve(baseDir, options.pidFile);
  var fd = fs.openSync(options.pidFile, 'w', 0644);
  fs.writeSync(fd, process.pid.toString());
}

var application = express();
var server = http.createServer(application);

application.set('json spaces', 1);
if (options.environment == 'production') {
  application.set('json spaces', -1); // disable pretty print!
}

var MemoryStore = session.MemoryStore;
var sessionStore = new MemoryStore();

if (options.enableTrustProxy) {
  application.enable('trust proxy');
}

if (options.accessLogFile) {
  var accessLogStream;
  if (options.accessLogFile == '-') {
    accessLogStream = process.stdout;
  } else {
    var accessLogStreamOptions = {
      flags: 'a',
      mode: 0644
    };
    options.accessLogFile = path.resolve(baseDir, options.accessLogFile);
    accessLogStream = fs.createWriteStream(options.accessLogFile,
                                           accessLogStreamOptions);
  }
  var accessLogOptions = {
    stream: accessLogStream
  };
  application.use(morgan(accessLogOptions));
}
application.use(cookieParser('secret key'));
application.use(session({
  secret: 'secret key',
  store:  sessionStore
}));
application.use(responseTime());
application.use('/', express.static(path.normalize(__dirname + '/../public/groonga-admin')));
if (options.cacheSize > 0) {
  var cacheMiddlewareRules = [
    { regex: /^\// }
  ];
  if (droonga.Cache) {
    var cache = new droonga.Cache({
      size: options.cacheSize,
    });
    application.use('/statistics/cache',
                    droonga.middleware.cacheStatistics(cache));
    application.use(droonga.middleware.cache(cache, {
      rules: cacheMiddlewareRules,
      logger: logger
    }));
  } else if (droonga.cache) {
    // TODO: Remove me when express-droonga 1.0.2 is released and
    // droonga-http-server requires express-droonga 1.0.2 or later.
    application.use(droonga.cache({
      size: options.cacheSize,
      rules: cacheMiddlewareRules,
    }));
  }
}

application.droonga({
  prefix:          '',
  logger:          logger,
  defaultDataset:  options.defaultDataset,
  tag:             options.tag,
  server:          server,
  sessionStore:    sessionStore, // this is required to share session information HTTP APIs
  receiveHostName: options.receiveHostName,
  hostName:        options.droongaEngineHostName,
  port:            options.droongaEnginePort,
  plugins:         options.plugins
});

server.listen(options.port);

function shutdown() {
  server.close();
  if (options.pidFile && fs.existsSync(options.pidFile)) {
    fs.unlinkSync(options.pidFile);
  }
}

process.on('SIGINT', function() {
  shutdown();
});

process.on('SIGTERM', function() {
  shutdown();
});
