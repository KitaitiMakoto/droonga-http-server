#!/usr/bin/env node
// -*- js -*-

var cookieParser = require('cookie-parser'),
    droonga      = require('express-droonga'),
    daemon       = require('daemon'),
    express      = require('express'),
    fs           = require('fs'),
    http         = require('http'),
    morgan       = require('morgan'),
    path         = require('path'),
    responseTime = require('response-time'),
    session      = require('express-session'),
    winston      = require('winston');

var defaultConfigs = require('../lib/default-configs');
var options = require('../lib/server-options');
options = options.define().parse(process.argv);

var baseDir = defaultConfigs.baseDir;

if (options.daemon) {
  daemon();
}


var logger;
var systemLogLevel = options.systemLogLevel.toLowerCase();
if (systemLogLevel == 'trace')
  systemLogLevel = 'silly';
if (options.systemLogFile && options.systemLogFile != '-') {
  options.systemLogFile = path.resolve(baseDir, options.systemLogFile);
  logger = new winston.Logger({
    transports: [
      new winston.transports.File({
        filename: options.systemLogFile,
        json: false
      })
    ]
  });
  logger.transports.file.level = systemLogLevel;
} else {
  var transports = [];
  if (!options.daemon) {
    transports.push(new winston.transports.Console());
  }
  logger = new winston.Logger({
    transports: transports
  });
  logger.transports.console.level = systemLogLevel;
}
// simulate Ruby compatible log level
logger.trace = logger.silly;

try {

if (options.pidFile) {
  options.pidFile = path.resolve(baseDir, options.pidFile);
  var fd = fs.openSync(options.pidFile, 'w', 0644);
  fs.writeSync(fd, process.pid.toString());
}

var application = express();
var server = http.createServer(application);

application.set('json spaces', 1);
if (options.environment == 'production') {
  application.set('json spaces', -1); // disable pretty print!
}

var MemoryStore = session.MemoryStore;
var sessionStore = new MemoryStore();

if (options.enableTrustProxy) {
  application.enable('trust proxy');
}

if (options.accessLogFile) {
  var accessLogStream;
  if (options.accessLogFile == '-') {
    accessLogStream = process.stdout;
  } else {
    var accessLogStreamOptions = {
      flags: 'a',
      mode: 0644
    };
    options.accessLogFile = path.resolve(baseDir, options.accessLogFile);
    accessLogStream = fs.createWriteStream(options.accessLogFile,
                                           accessLogStreamOptions);
  }
  var accessLogOptions = {
    stream: accessLogStream
  };
  application.use(morgan("combined", accessLogOptions));
}
application.use(cookieParser('secret key'));
application.use(session({
  secret: 'secret key',
  resave: true,
  saveUninitialized: true,
  store:  sessionStore
}));
application.use(responseTime());
application.use('/', express.static(options.documentRoot));
if (options.cacheSize > 0) {
  //XXX Activate response cache only for some commands.
  //    In future versions, this restriction should be controlled by
  //    some information (a part of response message's envelope)
  //    returned from Droonga Engine.
  var cachableEndpoints = [
    '/$',              // The admin page
    '/tables/[^?/]',   // REST API, associated to "search"
    '/droonga/search', // RAW Droonga command "search"
    '/d/select'        // Groonga's "select"
  ];
  var cacheMiddlewareRules = [
    { regex:        new RegExp('^(' + cachableEndpoints.join('|') + ')'),
      ttlInSeconds: options.cacheTtlInSeconds }
    // { regex:        /^\//,
    //   ttlInSeconds: options.cacheTtlInSeconds }
  ];
  if (droonga.Cache) {
    var cache = new droonga.Cache({
      size: options.cacheSize
    });
    application.use('/statistics/cache',
                    droonga.middleware.cacheStatistics(cache));
    application.use(droonga.middleware.cache(cache, {
      rules:  cacheMiddlewareRules,
      logger: logger
    }));
    application.delete('/cache', function(request, response, next) {
      cache.clear(function(error) {
        response.jsonp(error ? false : true);
      });
    });
  }
}

application.droonga({
  prefix:          '',
  logger:          logger,
  defaultDataset:  options.defaultDataset,
  defaultTimeout:  options.defaultTimeout,
  tag:             options.tag,
  server:          server,
  sessionStore:    sessionStore, // this is required to share session information HTTP APIs
  receiveHostName: options.receiveHostName,
  hostNames:       options.droongaEngineHostNames,
  port:            options.droongaEnginePort,
  plugins:         options.plugins,
  serf:            path.resolve(baseDir, 'serf'),
  syncHostNames:   true
});

try {
  logger.info('Start to listen ' + options.host + ':' + options.port);
  server.on('error', shutdown);
  server.listen(options.port, options.host);
} catch(error) {
  shutdown(error);
}

function shutdown(error) {
  if (error) {
    logger.error('Shutting down the server by an unexpected error.');
    logger.error(error);
  }

  try {
    logger.trace('Trying to close the server: start');
    server.close();
    logger.trace('Trying to close the server: done');
  } catch(error) {
    logger.error('Trying to close the server: failed');
    logger.error(error);
  }

  if (options.pidFile && fs.existsSync(options.pidFile)) {
    logger.trace('Removing the PID file: start');
    fs.unlinkSync(options.pidFile);
    logger.trace('Removing the PID file: done');
  }
}

/*
process.on('SIGHUP', function() {
  //TODO: We should do something to reload new settings without restarting...
});
*/

process.on('SIGINT', function() {
  logger.info('Received a SIGINT signal. Shutting down the server...');
  shutdown();
});

process.on('SIGTERM', function() {
  logger.info('Received a SIGTERM signal. Shutting down the server...');
  shutdown();
});

}
catch(error) {
  if (error)
    logger.error(error);
}
